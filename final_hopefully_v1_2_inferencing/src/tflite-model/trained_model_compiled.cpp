/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 06.01.2022 21:49:43

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3440;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1160 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038756127469241619, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 128, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { 270, 372, 12795, 4541, -26663, -20066, -25680, 2476, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 2.5779987481655553e-05, 1.8835544324247167e-05, 1.8819544493453577e-05, 1.5651661669835448e-05, 1.4585214557882864e-05, 1.7610493159736507e-05, 1.6641715774312615e-05, 3.2332900445908308e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -2403, -539, -288, -577, 400, -608, -412, 2539, 1408, -1003, 1789, -694, -3122, 3229, -312, -1906, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 7.1458285674452782e-05, 8.7010914285201579e-05, 7.1508991823066026e-05, 6.8929890403524041e-05, 3.9130267396103591e-05, 7.2770642873365432e-05, 7.9007069871295244e-05, 0.00010022289643529803, 4.5054261136101559e-05, 7.634526991751045e-05, 4.1297895222669467e-05, 6.9690962845925242e-05, 9.4435781647916883e-05, 0.00012398710532579571, 0.00010692228534026071, 9.0812711277976632e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[3] = { 2600, -4195, 1560, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0002116393152391538, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[3*128] = { 
  42, -74, -87, -11, 19, -72, -94, 27, 17, -76, 11, -18, 67, 93, -93, 20, 60, -54, -71, -49, 10, -68, -99, 55, 6, -17, 1, -15, 81, 127, -67, 68, 74, -57, -56, -55, 2, -58, -80, 49, 6, -69, 8, -30, 76, 106, -67, 58, 60, -65, -89, -23, -7, -59, -78, 52, 4, -53, 4, -42, 50, 111, -53, 64, 77, -65, -73, -35, 3, -61, -93, 53, 2, -78, 12, -38, 77, 106, -63, 30, 79, -65, -71, -30, 7, -86, -87, 76, 11, -71, 11, -32, 70, 120, -65, 70, 39, -50, -78, -57, 7, -75, -88, 78, 15, -50, -3, -30, 76, 127, -45, 49, -37, -73, -59, -79, 10, -50, -26, 36, -4, -25, 4, -15, 35, 49, -32, -63, 
  10, 0, 34, -5, -27, 10, 10, 31, -46, 20, -46, -41, 42, -117, 3, 27, -7, 20, 23, 70, -12, 9, 2, 33, -47, 31, -27, -13, 25, -67, 14, 37, 5, 14, 26, 57, -18, 12, 8, 26, -37, 20, -9, 2, -8, -84, 6, 40, 7, -4, 5, 64, -26, -3, 12, 34, -45, 25, -19, -26, 24, -69, 7, 28, 16, 26, 8, 46, -8, 16, 9, 30, -36, 16, -4, -4, 26, -68, -5, 43, 18, 6, 13, 58, 0, 5, 11, 35, -28, 13, 0, 1, 28, -40, 14, 32, 0, 4, 17, 63, -10, 14, 16, 36, -38, 38, -21, 3, 44, -41, -2, 68, 18, 3, -2, 29, -18, 11, 3, 22, -34, 21, -29, 0, 73, -65, 8, 14, 
  -43, 15, 0, 7, 26, 11, 6, -37, 16, -4, 13, 34, -79, -23, 8, -45, -75, 30, 9, -49, 20, 5, -1, -82, 10, -16, 1, 26, -55, -66, 13, -74, -53, 18, 17, -48, 8, 14, 10, -57, 10, -2, 8, 16, -65, -73, 6, -49, -60, 5, 5, -49, -3, 1, 13, -76, 13, 13, 2, 11, -58, -78, 9, -61, -46, 26, 9, -36, 10, 16, 10, -64, 8, 11, 8, 4, -55, -74, -2, -48, -67, 20, 9, -61, 13, 6, 17, -76, 16, 5, 12, 22, -55, -80, 18, -74, -31, 24, 19, -41, 8, 19, 17, -81, 23, -13, -5, 25, -60, -72, 2, -70, -37, 33, -8, -2, 17, 16, 9, -28, 1, 5, 2, 19, -74, 3, 11, -4, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 3,128 } };
const TfArray<1, float> quant5_scale = { 1, { 0.011406939476728439, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -5,-9,-41,32,36,4,-19,-12,0,0,12,30,-35,24,6,-20,9,6,-17,16,-15,7,5,25,49,44,17,26,16,-31,20,-23,-53,-22,-17,32,-6,-26,-24,-127, 13,-9,6,21,33,2,39,-8,19,15,47,8,-5,-12,10,35,33,-31,29,4,8,-26,39,-14,24,-18,26,-3,16,0,25,11,-8,-12,-39,22,7,-2,-44,-86, 1,-1,9,28,37,47,-15,-29,-16,-16,-15,1,-36,23,-9,2,-1,10,-55,38,19,-5,10,-28,13,29,20,-1,7,3,13,-22,-31,-27,-49,19,29,-2,-26,-113, 
  /* [1][0][][] */ 45,9,-7,8,42,-70,-1,-45,15,127,108,12,59,9,22,-38,-16,-43,-56,-37,-77,-8,-73,-30,-19,10,67,25,-7,21,-6,0,-14,-19,-38,-16,-14,-26,-1,-52, 78,12,3,37,1,-55,60,4,66,98,62,-18,-4,-48,-16,-61,-19,-3,-88,-25,-6,-7,-2,-3,1,15,45,24,28,-5,-38,40,-8,24,-43,43,-24,52,74,48, 19,-25,-17,38,20,-111,38,8,27,88,55,-16,4,18,-34,-4,3,-73,-62,-42,-50,-60,-7,-37,-12,-6,80,-11,19,-55,-35,-6,-5,10,-48,-39,20,32,52,-48, 
  /* [2][0][][] */ 57,-20,-14,48,-31,41,-14,59,-5,-7,13,-7,-20,51,-62,19,25,-81,-34,30,-45,-30,28,5,-52,-49,59,-5,27,27,10,-27,19,-15,-6,20,-12,6,8,15, 6,-74,-65,-35,-74,127,-42,-64,57,-57,-5,-32,-70,-13,-22,57,19,-52,-23,21,-10,-45,1,-48,-20,-48,-39,61,33,-2,21,-26,-17,18,-20,-48,22,34,-36,-26, 51,5,78,-3,28,18,95,77,-28,-46,3,-10,31,62,-1,31,13,-50,6,-78,31,-59,4,-1,-65,-35,41,28,11,-26,26,1,10,12,-38,-2,-24,-45,-7,-76, 
  /* [3][0][][] */ -49,16,-40,39,38,-17,-30,7,4,24,20,4,15,84,91,-41,18,-46,-8,-17,9,15,48,-10,54,-29,-16,-38,-66,-42,20,1,-27,-15,2,68,30,30,-60,-127, -44,-6,-1,-32,42,81,13,-12,2,54,-30,33,25,31,43,68,-4,-15,-32,-19,0,24,74,-5,22,-33,-4,-21,-15,-34,45,-12,-46,30,30,66,25,-53,-17,-118, -38,-68,15,-17,38,-13,57,37,9,-12,16,17,113,84,70,-72,18,-59,35,30,12,-38,-6,-10,16,-46,-44,15,-47,-76,-38,-31,-56,25,49,105,-11,-13,-45,-59, 
  /* [4][0][][] */ 122,112,54,53,77,0,-2,-4,60,-19,-11,52,-27,32,-43,8,0,-21,15,-11,-1,20,38,22,-8,-14,-54,-76,10,-79,-70,-109,-9,-32,-45,-69,-6,24,-79,-6, 127,69,24,44,80,8,-34,-17,78,-41,-26,-43,-70,-21,-64,9,-8,-43,-47,9,-4,0,18,86,15,37,-57,0,-2,-14,-17,-36,-43,15,88,23,38,-8,58,50, 66,-10,54,4,16,-68,-99,-75,48,-62,-46,-52,-1,-46,-45,-34,-55,-6,-7,-19,30,33,108,18,80,-3,-14,20,44,-26,-91,-53,3,9,49,60,30,47,38,65, 
  /* [5][0][][] */ 80,-20,-15,21,15,4,5,1,57,12,49,0,-3,9,46,28,-39,56,6,9,-2,-13,-28,20,38,30,127,51,36,19,33,7,-34,20,7,71,51,26,36,2, 13,-12,-23,41,-5,-22,0,8,-38,26,-31,-56,-54,-28,-20,-34,-42,16,-28,-58,-31,-66,-82,-12,26,39,89,64,-7,15,4,9,-19,26,10,15,-24,45,25,-22, 20,7,-13,-19,24,-57,-3,5,-7,-24,12,-16,-61,12,20,8,-44,-18,-47,-22,-19,-39,-36,1,60,80,96,43,43,15,-27,-64,-66,-55,-8,-53,-28,-42,-35,-25, 
  /* [6][0][][] */ 14,-40,-58,9,38,-53,-24,-51,-41,66,6,39,35,5,-33,-26,3,-52,10,-60,-59,1,6,29,-8,31,-6,16,74,8,-75,-38,38,82,16,-1,-17,-52,-127,-63, 60,-21,-6,21,-15,-31,-21,-46,-37,3,20,9,-40,-31,-73,-3,-49,-39,-11,-32,-42,14,29,10,-37,31,-14,-4,40,7,-20,-27,12,1,46,-4,-21,27,-71,-7, 32,-5,-20,8,13,-33,9,-14,0,43,23,64,50,-15,-6,21,-24,-17,24,16,39,3,38,45,-22,36,87,-2,71,7,-52,-34,57,80,95,37,39,17,16,62, 
  /* [7][0][][] */ -116,-23,-14,-18,-20,-66,-3,14,24,-1,-33,12,-12,11,11,14,-58,-8,5,-17,49,-22,0,23,12,17,-2,-19,17,-15,-17,11,20,22,-12,-5,20,-35,25,-14, -122,-19,-23,3,-34,-64,39,38,5,-8,-12,22,6,-44,28,-14,-37,-39,-7,-31,14,-28,17,-7,42,10,12,-5,23,1,19,20,22,38,-25,-6,-17,-13,27,-16, -127,-25,-24,-74,-52,-74,8,11,-5,-20,-47,4,-18,19,2,2,-44,-5,-25,15,20,24,-9,18,-5,11,20,2,-19,-8,-8,5,4,34,1,31,-15,-33,16,8, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0066518480889499187, 0.0048600169830024242, 0.0048558888956904411, 0.0040384996682405472, 0.0037633313331753016, 0.0045439247041940689, 0.0042939572595059872, 0.0083426553755998611, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ 0,-40,-63,-8,20,-21,70,33, 32,18,-127,5,97,-6,21,12, 30,-12,-107,7,113,42,106,23, 
  /* [1][0][][] */ 24,36,-9,4,-99,11,-97,46, 10,-5,1,21,-127,20,-86,-6, 72,20,9,12,-70,7,-92,55, 
  /* [2][0][][] */ 21,85,-3,0,74,69,-48,-10, 21,-14,-8,13,59,-26,-69,61, 0,-127,-9,4,44,11,-38,0, 
  /* [3][0][][] */ 5,53,12,17,-27,85,-69,-20, 1,-9,10,-25,32,-68,6,7, -14,-45,7,-44,-127,-96,7,37, 
  /* [4][0][][] */ -2,3,109,21,-102,-4,-16,93, 2,-47,79,-43,-38,-10,31,69, 31,0,112,45,-70,8,-45,127, 
  /* [5][0][][] */ 127,126,0,9,20,58,-34,51, 46,22,-2,22,-22,7,-103,-11, 80,8,0,1,29,14,-67,32, 
  /* [6][0][][] */ 96,127,-2,3,-8,-4,-60,47, 65,9,-3,3,-14,53,-13,-51, 66,80,-1,7,48,-43,-2,16, 
  /* [7][0][][] */ -24,13,-77,-1,24,-69,37,-97, -41,9,-124,-3,83,-38,-7,-112, -43,10,-127,-1,17,-16,49,-56, 
  /* [8][0][][] */ -52,-68,127,8,-39,10,-10,109, -63,-51,-75,81,-60,14,-21,1, -62,-65,76,-14,-26,4,-37,38, 
  /* [9][0][][] */ -21,-20,4,2,84,62,26,-127, -20,53,26,-31,47,21,28,-116, 1,32,7,-11,35,-2,20,-85, 
  /* [10][0][][] */ -10,-10,127,19,-108,-11,7,117, 23,-20,75,35,-97,-6,3,-9, 7,-12,35,-25,-103,2,-36,65, 
  /* [11][0][][] */ 39,8,-13,16,-85,-26,-20,6, 14,20,54,-22,-63,-1,-77,65, 16,11,-50,22,-51,-16,-127,21, 
  /* [12][0][][] */ 1,14,-127,3,35,55,5,8, 10,8,-112,-1,70,-3,5,20, 8,5,-78,-4,11,-6,96,32, 
  /* [13][0][][] */ -77,-102,-14,-53,-70,-51,-15,-55, -94,-44,-2,-60,-70,-49,-36,-53, -94,-127,-16,-66,-63,-70,-45,-51, 
  /* [14][0][][] */ 57,59,16,2,-127,42,-38,-15, 59,46,-22,17,-37,-2,-3,11, 40,69,7,-7,-29,19,-7,17, 
  /* [15][0][][] */ 21,55,-109,-3,20,-16,15,-3, -14,14,-127,-25,66,46,7,-14, -17,0,-99,-24,-30,15,56,17, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0084353387355804443, 0.010271258652210236, 0.008441324345767498, 0.0081368731334805489, 0.0046191574074327946, 0.0085902567952871323, 0.0093264402821660042, 0.011830875650048256, 0.0053184591233730316, 0.009012226015329361, 0.0048750364221632481, 0.0082267140969634056, 0.01114773191511631, 0.014636136591434479, 0.012621709145605564, 0.010720044374465942, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 29, 40, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 29, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 15, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 15, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,29,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0038756127469241619, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,29,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0084712998941540718, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,29,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0084712998941540718, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,15,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0084712998941540718, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,15,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0084712998941540718, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,15,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.018553558737039566, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,15,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.018553558737039566, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,8,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.018553558737039566, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,128 } };
const TfArray<1, float> quant20_scale = { 1, { 0.018553558737039566, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.33051818609237671, } };
const TfArray<1, int> quant21_zero = { 1, { 81 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1168, (TfLiteIntArray*)&tensor_dimension0, 1160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1648, (TfLiteIntArray*)&tensor_dimension13, 232, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 232, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 240, (TfLiteIntArray*)&tensor_dimension15, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 240, (TfLiteIntArray*)&tensor_dimension17, 240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 240, (TfLiteIntArray*)&tensor_dimension19, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
